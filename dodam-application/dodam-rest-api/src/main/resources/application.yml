server:
  port: 8080

spring:
  batch:
    job:
      enabled: false
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 10
      minimum-idle: 2
      idle-timeout: 30000
      pool-name: MyHikariCP
  servlet:
    multipart:
      max-file-size: 500MB
      max-request-size: 500MB
  web:
    resources:
      static-locations: classpath:/static/
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        show_sql: false
        format_sql: true
  data:
    redis.repositories.enabled: false
redis:
  master:
    host: ${REDIS_MASTER_HOST}
    port: ${REDIS_MASTER_PORT}
  slaves:
    - host: ${REDIS_SLAVE_1_HOST}
      port: ${REDIS_SLAVE_1_PORT}
    - host: ${REDIS_SLAVE_2_HOST}
      port: ${REDIS_SLAVE_2_PORT}

auth:
  code:
    key: ${AUTH_CODE_KEY}
  access:
    key: ${AUTH_ACCESS_KEY}

logging.level:
  org.springframework.boot.autoconfigure: ERROR

app:
  token:
    reissueAccess: ${TOKEN_REISSUE_ACCESS_URL}
    generateAccess: ${TOKEN_GENERATE_ACCESS_URL}
    generateRefresh: ${TOKEN_GENERATE_REFRESH_URL}
    verify: ${TOKEN_VERIFY_URL}
  jwt:
    issuer: ${JWT_ISSUER}
    tokenServer: ${TOKEN_SERVER_URL}
  youtube:
    key:
      apiKey: ${YOUTUBE_KEY}
    url:
      video: ${YOUTUBE_VIDEO_URL}
      search: ${YOUTUBE_SEARCH_URL}
  gabia:
    id: ${GABIA_ID}
    apiKey: ${GABIA_API_KEY}
    refKey: ${GABIA_REF_KEY}
    tokenUrl: ${GABIA_TOKEN_URL}
    smsUrl: ${GABIA_SMS_URL}
    lmsUrl: ${GABIA_LMS_URL}
    sender: ${GABIA_SMS_SENDER}
    subject: ${GABIA_SMS_SUBJECT}
  neis:
    apiKey: ${NEIS_KEY}
    url: ${NEIS_URL}
  codenary:
    url: ${CODENARY_URL}
  melon:
    url: ${MELON_URL}
  discord:
    url: ${DISCORD_URL}
  qr-code:
    apiKey: ${QR_CODE_API_KEY}
cloud:
  aws:
    credentials:
      access-key: ${S3_ACCESS_KEY}
      secret-key: ${S3_SECRET_KEY}
    stack:
      auto: false
    region:
      static: ${S3_REGION}
    storage:
      endpoint: ${S3_ENDPOINT}
      bucket: ${S3_BUCKET}

management:
  server:
    port: 8090
  endpoints:
    web:
      exposure:
        include: prometheus

logging:
  level:
    com:
      amazonaws:
        util:
          com.amazonaws.util.EC2MetadataUtils: error
